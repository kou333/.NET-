In C# 12, collection expressions were introduced to make creating and working with collections (like arrays, lists, spans) more concise and readable.

ðŸ”¹ What Is a Collection Expression?
A collection expression is a new syntax using { ... } that lets you directly create a collection (array, list, etc.) without explicitly using constructors or new.

ðŸ”¹ Example: Array
csharp
Copy
Edit
int[] numbers = [1, 2, 3, 4, 5];
This is equivalent to:

csharp
Copy
Edit
int[] numbers = new int[] { 1, 2, 3, 4, 5 };
ðŸ”¹ Example: List (with implicit conversion)
csharp
Copy
Edit
List<string> names = ["Alice", "Bob", "Charlie"];
Behind the scenes, it uses a CreateRange or collection initializer depending on the target type.

ðŸ”¹ Using Spread (..) Operator
You can combine collections using the .. spread operator:

csharp
Copy
Edit
int[] a = [1, 2];
int[] b = [3, 4];

int[] combined = [..a, ..b, 5]; // Result: [1, 2, 3, 4, 5]
ðŸ”¹ Valid With
You can use collection expressions with:

T[] arrays

List<T>

Span<T> / ReadOnlySpan<T>

Any type that defines a Create method or an implicit conversion from a collection expression

ðŸ”¹ Practical Example
csharp
Copy
Edit
var even = [2, 4, 6];
var odd = [1, 3, 5];
var all = [..even, ..odd, 7, 9]; // Combines everything into one array
